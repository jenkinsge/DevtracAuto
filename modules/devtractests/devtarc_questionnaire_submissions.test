<?php 
 module_load_include('test', 'simpletest_clone');
class testQuestionnaireSubmissionCase extends SimpleTestCloneTestCase {
  protected $profile = 'devtrac';
  protected $fieldWorker;
  protected $editor;
  public static function getInfo() {
    return array(
        'name' => 'Questionnaire-questions and submission Test',
        'description' => 'these tests are directly intended fo the questionnaire-questions submission workflow',
        'group' => 'Devtrac',
    );
  }
  /**
   * Log in a user with the internal browser.
   *
   * If a user is already logged in, then the current user is logged out before
   * logging in the specified user.
   *
   * Please note that neither the global $user nor the passed in user object is
   * populated with data of the logged in user. If you need full access to the
   * user object after logging in, it must be updated manually. If you also need
   * access to the plain-text password of the user (set by drupalCreateUser()),
   * e.g. to login the same user again, then it must be re-assigned manually.
   * For example:
   * @code
   *   // Create a user.
   *   $account = $this->drupalCreateUser(array());
   *   $this->drupalLogin($account);
   *   // Load real user object.
   *   $pass_raw = $account->pass_raw;
   *   $account = user_load($account->uid);
   *   $account->pass_raw = $pass_raw;
   * @endcode
   *
   * @param$user
   *   User object representing the user to login.
   *
   * @see drupalCreateUser()
   */
  protected function drupalLogin(stdClass $user) {
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }
    $edit = array(
        'name' => $user->name,
        'pass' => $user->pass_raw
    );
    $this->drupalPost('user', $edit, t('Log in'));
    // If a "log out" link appears on the page, it is almost certainly because
    // the login was successful.
    $pass = $this->assertLink(t('Sign out'), 0, t('User %name successfully logged in.', array('%name' => $edit['name'])), t('User login'));
    if ($pass) {
      $this->loggedInUser = $user;
    }
  }
  /**
   * Create and log in a permitted user.
   */
  public function setup() {
    parent::setUp();
    $this->public_files_directory = variable_get('file_public_path');
    $this->editor = $this->drupalCreateUser(array(
      'access content',
      'create fieldtrip content',
      'administer nodes',
      'administer permissions',
      'access user profiles',
      'administer site configuration',
      'administer modules',
      'create questionnaire_question',
      'create questionnaire_question content'));
    $this->editor->roles[] = 'editor';
    user_save($this->editor);
    // Another user
    $this->fieldWorker = $this->drupalCreateUser(array(
      'get any binary files',
      'get own binary files',
      'hide own comments',
      'post comments',
      'save file information',
      'skip comment approval',
      'submit questions',
      'view taxonomy_vocabulary_1',
      'access comments',
      'access content',
      'access proxy router',
      'access user profiles',
      'administer own comments',
      'create taxonomy_vocabulary_1',
      'create fieldtrip content',
    ));
    $this->fieldWorker->roles[] = 'field worker';
    user_save($this->fieldWorker);
    $this->drupalLogin($this->editor);
    $this->assertText(t('Overview'), t('Overview text on the use page is found'), 'Devtrac');
    $this->assertLink('Users', 0, t('User link is found'));
    $this->assertNoText('Overview text on the use page', 'The changes have been saved. message is not showing');
  }
  
  public function testEditorQuestionnaireAddForWF() {
  	$this->drupalLogin($this->editor);
  	$this->drupalPost('user/' . $this->editor->uid . '/edit', array(
  	  "roles[4]" => 4,
  	  'taxonomy_vocabulary_5[und]' => 8,
  	  'taxonomy_vocabulary_4[und]' => 12,
  	  'field_user_firstname[und][0][value]' => 'Editor',
  	  'field_user_surname[und][0][value]' => 'Adminol',
  	  'field_user_aboutme[und][0][value]' => 'about editor',
  	  'field_user_superior[und][0][target_id]' => 'admin (1)'),
  	  t('Save'));
  	$this->assertText(t('Overview'), t('Overview text on the use page is found'), 'Devtrac');
  	$this->drupalGet('node/add/questionnaire-question');
  	$this->assertNoResponse(403, 'page access is not denied by the server');
  	$this->assertResponse(200, 'page found by the server');
  	$this->assertText('Question', 'Questionnaire page is found and loaded');
    $this->assertText(t('Overview'), t('Overview is not found on the page'), 'Devtrac');
    $this->drupalGet('node/add/questionnaire-question');
    $qsubmit['title'] = $this->randomString(35);
    $qsubmit['taxonomy_vocabulary_1[und]'] = 284;
    $qsubmit['taxonomy_vocabulary_8[und][]'] = 228;
    $qsubmit['questionnaire_question_type[und]'] = 'select';
    $this->drupalPost(NULL, $qsubmit, t('Save'));
    $this->assertText('has been created.', 'questionnaire is created');
    $this->assertNoLink('Government Office', 0, 'Government Office link is not found');
    $this->assertNoLink('Child Protection', 0, 'Child Protection link is not found');
  }
  
  
  
  
}