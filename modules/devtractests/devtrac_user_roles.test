<?php
/**
 * Functional tests for users inter role coalition.
 */
module_load_include('test', 'simpletest_clone');
class FieldtripUserDistrictsTest1Case extends SimpleTestCloneTestCase {
  protected $profile = 'devtrac';
  protected $adminUser;
  protected $managerUser;
  protected $unicefUser;
  protected $editUser;
  public static function getInfo() {
    return array(
      'name' => 'Create user for multiple Site Report Type',
      'description' => "Field User creates multiple Site Report Types",
      'group' => 'Devtrac',
    );
  }
  /**
   * @see
   * DrupalWebTestCase::setUp()
   * 1. Create a new User with all permissions of role "Unicef" (rid = 5).
   * 2. Log the user into the system.
   * Log in a user with the internal browser.
   *
   * If a user is already logged in, then the current user is logged out before
   * logging in the specified user.
   *
   * Please note that neither the global $user nor the passed in user object is
   * populated with data of the logged in user. If you need full access to the
   * user object after logging in, it must be updated manually. If you also need
   * access to the plain-text password of the user (set by drupalCreateUser()),
   * e.g. to login the same user again, then it must be re-assigned manually.
   * For example:
   * @code
   *   // Create a user.
   *   $account = $this->drupalCreateUser(array());
   *   $this->drupalLogin($account);
   *   // Load real user object.
   *   $pass_raw = $account->pass_raw;
   *   $account = user_load($account->uid);
   *   $account->pass_raw = $pass_raw;
   * @endcode
   * @param$user 
   * User object representing the user to login.
   * @see drupalCreateUser()
   */
  protected function drupalLogin(stdClass $user) {
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }
    $edit = array(
      'name' => $user->name,
      'pass' => $user->pass_raw,
    );
    $this->drupalPost('user', $edit, t('Log in'));
    // If a "log out" link appears on the page, it is almost
    // certainly because the login was successful.
    $pass = $this->assertLink(t('Sign out'), 0, t('User %name successfully logged in.', array('%name' => $edit['name'])), t('User login'));
    if ($pass) {
      $this->loggedInUser = $user;
    }
  }
  /**
   * Creating global users with permissons (non-PHPdoc).
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp('devtractests', 'devtrac7');
    $this->public_files_directory = variable_get('file_public_path');
    $this->adminUser = $this->drupalCreateUser(array(
      'administer users',
      'administer permissions',
      'administer taxonomy',
      'access user profiles',
      'administer site configuration',
      'administer modules'));
    $this->managerUser = $this->drupalCreateUser(array(
      'administer users',
      'administer permissions',
      'administer taxonomy',
      'access user profiles',
      'administer site configuration',
      'administer modules'));
    $this->editUser = $this->drupalCreateUser(array(
      'administer users',
      'administer permissions',
      'access user profiles',
      'administer site configuration',
      'administer taxonomy',
      'administer modules'));
    $this->drupalLogin($this->adminUser);
    $this->drupalPost('user/' . $this->adminUser->uid . '/edit', array(
      "roles[3]" => 3,
      'field_user_firstname[und][0][value]' => 'ozzx',
      'field_user_surname[und][0][value]' => 'xzzo',
      'field_user_aboutme[und][0][value]' => 'aboutjan',
      'field_user_superior[und][0][target_id]' => 'admin (1)',
      'taxonomy_vocabulary_5[und]' => 8,
      'taxonomy_vocabulary_4[und]' => 12),
    t('Save'));
  }
  /**
   * Checking that user automatically logged can be logged out. 
   */
  public function testAdminroleInterdependencestest() {
    $this->drupalGet('user/' . $this->adminUser->uid);
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }
    $this->drupalLogin($this->managerUser);
    $this->drupalGet('user/' . $this->managerUser->uid);
    $this->assertNoText(t('Manager:'), t('manager field is not showing as is not yet in the sytem showing'), 'Devtrac');
  }
  /**
   * This tests multiple districts, there was a change in the requirements.
   */
  public function testUserMultiSiteReportTypeSelectiontest() {
    $this->drupalGet('node/add/fieldtrip', array('query' => array('field_fieldtrip_user' => $this->managerUser->uid, 'field_fieldtrip_places' => '')));
    $this->assertNoText(t('TA Number'), t('TA number field is found'), 'DevTrac');
    $percentage = array('field_fieldtrip_fc_purpose_percent[und][0][value]' => 78);
    // Populating the fieldtrip create form.
    $this->assertNoField('taxonomy_vocabulary_6[und][', 'District field is nolonger found on add field trip form');
    $fullreportsubmitozyq['title'] = 'YES WE CAN';
    $fullreportsubmitozyq['field_fieldtrip_fc_purpose[und][0][field_fieldtrip_purpose_descr][und][0][value]'] = $this->randomName(32);
    $fullreportsubmitozyq['field_fieldtrip_internal_id[und][0][value]'] = $this->randomName(7);
    $this->assertNoField('field_fieldtrip_proms_ta_id[und][0][value]', 'Proms TA id field was renamed');
    $fullreportsubmitozyq['field_fieldtrip_fc_purpose[und][0][field_fieldtrip_fc_purpose_purps][und]'] = 6;
    $fullreportsubmitozyq['field_fieldtrip_fc_purpose[und][0][field_fieldtrip_purpose_percent][und][0][value]'] = 100;
    $fullreportsubmitozyq['field_fieldtrip_start_end_date[und][0][value][date]'] = '26/09/2012';
    $fullreportsubmitozyq['field_fieldtrip_start_end_date[und][0][value2][date]'] = '26/10/2012';
    $this->drupalPost(NULL, $fullreportsubmitozyq, t('Save'), array('query' => array('field_fieldtrip_user' => $this->managerUser->uid, 'field_fieldtrip_places' => '')));
    $this->assertText(t('has been created.'), ('field trip is created successifully'), 'DevTrac');
    $nodeaddreportfullsubmitozyq = $this->drupalGetNodeByTitle($fullreportsubmitozyq["title"]);
    $this->assertNotNull($nodeaddreportfullsubmitozyq, t('node loaded'));
    $this->assertNoLink('Add a location to the Field Trip.', 0, t('link to add Location to fieldtrip is no longer showing'));
    $this->drupalGet('node/' . $nodeaddreportfullsubmitozyq->nid . '/addplaceform/ajax/nojs/go', array('query' => array('destination' => 'node/' . $nodeaddreportfullsubmitozyq->nid)));
    $formsubmitreportsozyq['reporttype'] = 2;
    $this->assertField('district', 'district field on add place form');
    $this->assertNoField('placetype', 'placetype field on add place form');
    // $formsubmitreportsozyq['placetype'] = 2;
    $this->assertNoField('placetype', 'Place Type field is no longer found on on the site report form', 'Devtrac');
    $this->drupalPost('node/' . $nodeaddreportfullsubmitozyq->nid . '/addplaceform/ajax/nojs/go', $formsubmitreportsozyq, t('Submit'), array(
    'query' => array(
    'destination' => 'node/' . $nodeaddreportfullsubmitozyq->nid)));
    $this->assertNoLink('Create New Location', 0, 'link Create new location found');
    // $this->clickLink('Create New Location', 0, 'Link to add location');
    $locationaddfullozyq['title'] = $this->randomName(32);
    $locationaddfullozyq['taxonomy_vocabulary_1[und]'] = 278;
    $this->assertField('taxonomy_vocabulary_6[und]', 'Taxonomy vocabulary 6 filed was removed from the form');
    $locationaddfullozyq['field_place_lat_long[und][0][geom]'] = 'POINT (31.768699645996 3.228319883347)';
    $this->drupalPost(NULL, $locationaddfullozyq, t('Save'), array('query' => array(
    'destination' => 'node/' . $nodeaddreportfullsubmitozyq->nid)));
    $this->assertNoText(t('Copied Lat-Lon to the Site Report.'), t('User Added the location on the map'), 'Devtrac');
    $this->assertNoText(t('Copied District on the Site Report.'), t('User Added the location on the map'), 'Devtrac');
    $this->assertNoText(t('Copied Place Type to Site Report.'), t('User Copied Place Type to Site Report.'), 'Devtrac');
    $this->assertText(t('has been created.'), t('Place has been created.'), 'Devtrac');
    $this->assertNoText('An illegal choice has been detected. Please contact the site administrator.');
    $this->assertNoText(t('Defaulted Date Visited to Start Date of Field Trip.'), t('Defaulted Date Visited to Start Date of Field Trip.'), 'Devtrac');
    // Now we access edit the site report submission form,
    // And fill in the Edit Field Trip Report Item Site Visit form.
    $this->drupalGet('node/add/ftritem/', array('query' => array('destination' => 'node/' . $nodeaddreportfullsubmitozyq->nid . '/fieldtrip_content_first/fieldtrip_content_first/edit-field-ftritem-narrative')));
    $ditnarrativeozyq['title'] = 'YES THAT IS IT FOR NOW!';
    //$ditnarrativeozyq['taxonomy_vocabulary_6[und]'] = array(80, 81, 82);
    $this->assertField('taxonomy_vocabulary_6[und]', 'Taxonomy vocabulary 6 filed was removed from the form');
    $ditnarrativeozyq['field_ftritem_narrative[und][0][value]'] = $this->randomName(30);
    $ditnarrativeozyq['field_ftritem_public_summary[und][0][value]'] = $this->randomName(15);
    $ditnarrativeozyq['field_ftritem_lat_long[und][0][geom]'] = 'POINT(33.346199035645 2.911979913712)';
    $this->assertNoField('taxonomy_vocabulary_8[und]', 'Taxonomy vocabulary 8 was renamed');
    $ditnarrativeozyq['taxonomy_vocabulary_8[und][]'] = array(47,48); 
    $this->assertNoField('files[field_ftritem_images_und_0]', 'Image field was renamed');
    $ditnarrativeozyq['media[field_ftritem_images_und_0]'] = '/sites/default/files/Technical School_c.png';
    $this->drupalPost(NULL, $ditnarrativeozyq, t('Save'), array('query' => array('destination' => 'node/' . $nodeaddreportfullsubmitozyq->nid . '/fieldtrip_content_first/fieldtrip_content_first/edit-field-ftritem-narrative')));
    $this->assertNoText(t('Public Summary cannot be longer than 600 characters but is currently 650 characters long.'), t('Public Summarycannot be longer than 600 characters but is currently 650 characters long.'), 'Devtrac');
    $this->assertNoText(t('Copied Lat-Lon to the Site Report.'), t('Copied Lat-Lon to the Site Report.'), 'Devtrac');
    // Error messages where changed.
    $this->assertNoText(t('Copied Lat-Lon to the Site Report.'), t('Copied Lat-Lon to the Site Report.'), 'Devtrac');
    $this->assertNoText(t('Subjects set.'), t('Subjects set.'), 'Devtrac');
    $this->assertNoText(t('Field Trip Report Item YES THAT IS IT FOR NOW! has been updated.'), t('Subjects set.'), 'Devtrac');
    $this->assertNoLink('Submit', 0, t('link to submit the site report is not found'), 'Devtrac');
    $this->assertNoLink('Submit the Field Trip to the manager', 0, t('link Submit the Field Trip to the manager is not showing'), 'Devtrac');
    // Now follow the submit link to submit the site report. the manager.
    $this->drupalGet('node/' . $nodeaddreportfullsubmitozyq->nid . '/setstatus/submit', array('query' => array('destination' => 'user/' . $this->managerUser->uid)));
    $this->assertLink('YES WE CAN', 0, t('field trip YES WE CAN is found in the manager inbox'), 'DevTrac');
    // Log out the authenticated user.
    $this->drupalGet('node/' . $nodeaddreportfullsubmitozyq->nid . '/approve/fieldtripcommentform/ajax/nojs/go?', array('query' => array('destination' => '/user/' . $this->managerUser->uid)));
    // Now login the manager to approve the site report.
    $this->assertText(t('submitted fieldtrip YES WE CAN for your approval.'), t('manager finds the field trip to approve'), 'DevTrac');
    $this->assertLink('Needs your approval', 0, t('link to field trip to approve found'), 'DevTrac');
    $this->assertLink('reply', 0, t('link to field trip to approve found'), 'DevTrac');
    $commentq['comment_body[und][0][value]'] = $this->randomName(12);
    // Commenting on the submitted fieldtrip.
    $this->drupalPost('node/' . $nodeaddreportfullsubmitozyq->nid . '/approve/fieldtripcommentform/ajax/nojs/go?', $commentq, t('Save'), array(
    'query' => array(
      'destination' => '/user/' . $this->managerUser->uid)));
    $this->assertText(t('Your comment has been posted.'), t('manager message is posted successifully'), 'DevTrac');
  }
  /**
   * Creating an editor user to edit users.
   */
  public function testEditUser() {
    $this->drupalLogin($this->managerUser);
    $this->unicefUser = $this->drupalCreateUser(array('create field_fieldtrip_user', 'edit field_fieldtrip_user'));
    $this->drupalLogin($this->managerUser);
    $this->drupalPost('user/' . $this->managerUser->uid . '/edit', array(
      "roles[5]" => 5,
      'taxonomy_vocabulary_5[und]' => 8,
      'taxonomy_vocabulary_4[und]' => 13,
      'field_user_firstname[und][0][value]' => 'firstname',
      'field_user_surname[und][0][value]' => 'lname',
      'field_user_aboutme[und][0][value]' => 'aboutjan',
      'field_user_superior[und][0][target_id]' => 'admin (1)'),
    t('Save'));
    $this->drupalGet('user/' . $this->managerUser->uid);
    $this->assertNoLink('admin admin', 0, 'Link not found');
    $this->assertLink('Edit', 0, 'Admin link is found');
    $this->drupalPost('user/' . $this->adminUser->uid . '/edit', array(
      "roles[3]" => 3,
      'field_user_firstname[und][0][value]' => 'ozzx',
      'field_user_surname[und][0][value]' => 'xzzo',
      'field_user_aboutme[und][0][value]' => 'aboutjan',
      'field_user_superior[und][0][target_id]' => 'firstname lname ' . '(' . $this->managerUser->uid . ')'),
    t('Save'));
  }
  /**
   * Unicef user logins and should edit fellow unicef users.
   */
  public function testUnicefEditorusertest() {
    /*if ($this->loggedInUser) {
      $this->drupalLogout();
    }*/
    $this->drupalLogin($this->editUser);
    $this->drupalPost('user/' . $this->editUser->uid . '/edit', array(
      "roles[4]" => 4,
      'field_user_firstname[und][0][value]' => 'unicefEditor',
      'field_user_surname[und][0][value]' => 'editor',
      'field_user_aboutme[und][0][value]' => 'aboutjan',
      'taxonomy_vocabulary_5[und]' => 11,
      'taxonomy_vocabulary_4[und]' => 13,
      'field_user_superior[und][0][target_id]' => 'firstname lname ' . '(' . $this->managerUser->uid . ')'),
    t('Save'));
    $this->assertNoText('Welcome, firstname', 'Welcome, firstname message not found');
    $this->assertText('Welcome, unicefEditor', 'Welcome, unicefEditor found');
    $this->drupalGet('users/firstname', array('query' => array('search_api_aggregation_1' => 'firstname')));
    $this->assertLink('Edit', 0, 'edit link is found');
  }
  /**
   * Confirming that the unicef user logins and access the add questionnaire.
   */
  public function testUnicefEditoruserQuestionnaireAccesstest() {
    $this->drupalLogin($this->editUser);
    $this->drupalPost('user/' . $this->editUser->uid . '/edit', array(
      "roles[4]" => 4,
      'field_user_firstname[und][0][value]' => 'unicefEditor',
      'field_user_surname[und][0][value]' => 'editor',
      'field_user_aboutme[und][0][value]' => 'aboutjan',
      'taxonomy_vocabulary_5[und]' => 10,
      'taxonomy_vocabulary_4[und]' => 12,
      'field_user_superior[und][0][target_id]' => 'firstname lname ' . '(' . $this->managerUser->uid . ')'),
    t('Save'));
    $this->assertNoText('Welcome, firstname', 'Welcome, firstname message not found');
    $this->assertText('Welcome, unicefEditor', 'Welcome, unicefEditor found');
    $this->drupalGet('node/add/questionnaire-question');
    $this->assertNoResponse(403, 'access is not denied to editor user');
    $this->assertResponse(200, 'quesstionnaire page returned');
  }
  /**
   * Unicef user logins and can not access add questionnaire.
   */
  public function testUnicefEditoruserEditQuestionnaireAccesstest1() {
    $this->drupalLogin($this->editUser);
    $this->drupalPost('user/' . $this->editUser->uid . '/edit', array(
      "roles[4]" => 4,
      'field_user_firstname[und][0][value]' => 'unicefEditor',
      'field_user_surname[und][0][value]' => 'editor',
      'field_user_aboutme[und][0][value]' => 'aboutjan',
      'taxonomy_vocabulary_5[und]' => 8,
      'taxonomy_vocabulary_4[und]' => 14,
      'field_user_superior[und][0][target_id]' => 'firstname lname ' . '(' . $this->managerUser->uid . ')'),
    t('Save'));
    $this->assertNoText('Welcome, firstname', 'Welcome, firstname message not found');
    $this->assertText('Welcome, unicefEditor', 'Welcome, unicefEditor found');
    $this->drupalGet('admin/devtrac7/edit_questions');
    $this->assertNoResponse(403, 'access denied to editor user');
    $this->assertResponse(200, 'No quesstionnaire page returned');
  }
  /**
   * Admin should access the action items.
   */
  public function testUnicefmanageruserEditQuestionnaireAccesstest() {
    $this->drupalLogin($this->managerUser);
    $this->drupalPost('user/' . $this->managerUser->uid . '/edit', array(
      "roles[5]" => 5,
      'field_user_firstname[und][0][value]' => 'unicefEditor',
      'field_user_surname[und][0][value]' => 'editor',
      'field_user_aboutme[und][0][value]' => 'aboutjan',
      'taxonomy_vocabulary_5[und]' => 8,
      'taxonomy_vocabulary_4[und]' => 14,
      'field_user_superior[und][0][target_id]' => 'Jan van Diepen (3)'),
    t('Save'));
    $this->assertNoText('Welcome, firstname', 'Welcome, firstname message not found');
    $this->assertNoText('Welcome, unicefEditor', 'Welcome, unicefEditor Text not found');
    $this->drupalGet('actionitems/2013/6/snv-programme-management');
    $this->assertResponse(200, 'No quesstionnaire page returned');
    $this->assertNoResponse(404, 'page not found');
    $this->assertNoText('Follow Up Task', 'Follow Up Task section is found');
    $this->assertNoText('Responsible Person:', 'Responsible Person: section is found');
    $this->assertNoText('SNV Programme management', 'SNV Programme management section is found');
    $this->assertNoText('Add new comment', 'Add new comment section is found');
  }
  /**
   * Unicef editor should access the action items.
   */
  public function testUnicefEditoruserEditQuestionnaireEditorAccesstest3() {
    $this->drupalLogin($this->editUser);
    $this->drupalPost('user/' . $this->editUser->uid . '/edit', array(
      "roles[4]" => 4,
      'field_user_firstname[und][0][value]' => 'unicefEditor',
      'field_user_surname[und][0][value]' => 'editor',
      'field_user_aboutme[und][0][value]' => 'aboutjan',
      'taxonomy_vocabulary_5[und]' => 10,
      'taxonomy_vocabulary_4[und]' => 12,
      'field_user_superior[und][0][target_id]' => 'admin (1)'),
    t('Save'));
    $this->assertNoText('Welcome, firstname', 'Welcome, firstname message not found');
    $this->assertText('Welcome, unicefEditor', 'Welcome, unicefEditor found');
    $this->drupalGet('actionitems/2011/6/snv-programme-management');
    $this->assertResponse(200, 'No quesstionnaire page returned');
    $this->assertNoResponse(404, 'Questionnaire page is found');
    $this->assertNoText('Follow Up Task', 'Follow Up Task section is found');
    $this->assertNoText('Responsible Person:', 'Responsible Person: section is found');
    $this->assertNoText('SNV Programme management', 'SNV Programme management section is found');
    $this->assertNoText('Add new comment', 'Add new comment section is found');
  }
}
