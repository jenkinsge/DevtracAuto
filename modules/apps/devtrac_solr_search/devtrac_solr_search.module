<?php
/**
 * @file
 * 
 * Connection details for Solr Server
 */

/**
 * Implements hook_apps_app_info()
 */
function devtrac_solr_search_apps_app_info() {
  return array(
    'configure form' => 'devtrac_solr_search_app_configure_form',
  );
}

/**
 * implements hook_app_configure_form
 */
function devtrac_solr_search_app_configure_form() {
  $markup = 'This module provides a Solr backend for the Search API module. ';
  $markup .= 'The backend uses Apache Solr servers for indexing and searching ';
  $markup .= 'content. It has great performance and is suitable for use on ';
  $markup .= 'large websites. If you want to use your own Solr server, please ';
  $markup .= 'contact your local Devtrac representative.';
  $form['solr_search_info'] = array(
    '#title' => t('Information'),
    '#prefix' => '<div>',
    '#markup' => $markup,
    '#suffix' => '</div>',
  );

  $form['devtrac_solr_search_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Solr host'),
    '#default_value' => variable_get('devtrac_solr_search_host', 'localhost'),
    '#required' => TRUE,
    '#description' => t('The host name or IP of your Solr server, e.g. <em>localhost</em> or <em>www.example.com</em>.'),
  );

  $form['devtrac_solr_search_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Solr port'),
    '#default_value' => variable_get('devtrac_solr_search_port', '8080'),
    '#required' => TRUE,
    '#description' => t('The Jetty example server is at port 8983, while Tomcat uses 8080 by default.'),
  );

  $form['devtrac_solr_search_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Solr path'),
    '#default_value' => variable_get('devtrac_solr_search_path', '/solr'),
    '#required' => TRUE,
    '#description' => t('The path that identifies the Solr instance to use on the server.'),
  );

  // Add a custom submit handler.
  $form['#submit'][] = 'devtrac_solr_search_app_configure_form_submit';

  return system_settings_form($form);
}

/**
 * Implements hook_app_configure_form_submit.
 * 
 * - Deletes all indexed data for the search_api_db_services class.
 * - Changes the service class of the server to search_api_solr_service and
 *   initializes the Solr Search server options.
 * - Marks all indices for reindexing.
 * - Removes all obsolete tables from the database.
 * - Disables the search_api_db_service module.
 */
function devtrac_solr_search_app_configure_form_submit($form, &$form_state) {
  // Clear all indexed data for the search_api_db_service.
  search_api_server_clear('devtrac_search_server');

  // Change the service class of the server to search_api_solr_service and
  // initialize the Solr Search server options.
  $values = $form_state['values'];
  $host = $values['devtrac_solr_search_host'];
  $port = $values['devtrac_solr_search_port'];
  $path = $values['devtrac_solr_search_path'];
  $options_array = array(
    'clean_ids' => TRUE,
    'scheme' => 'http',
    'host' => $host,
    'port' => $port,
    'path' => $path,
    'http_user' => '',
    'http_pass' => '',
    'excerpt' => 0,
    'retrieve_data' => 0,
    'highlight_data' => 0,
    'http_method' => 'POST',
    'autocorrect_spell' => 1,
    'autocorrect_suggest_words' => 1,
    'clean_ids_form' => array(),
  );

  $class = 'search_api_solr_service';
  $options_string = serialize($options_array);
  $fields = array(
    'class' => $class,
    'options' => $options_string,
  );

  db_update('search_api_server')
    ->fields($fields)
    ->condition('machine_name', 'devtrac_search_server')
    ->execute();

  // Mark all indices for reindexing for the search_api_solr_service.
  search_api_server_clear('devtrac_search_server');

  // The search_api_db_service created a lot of tables in the database.
  // Delete all of them, but only the ones that are in our Devtrac server.
  global $databases;
  $database = $databases['default']['default']['database'];
  $tables = db_query("SHOW TABLES");
  foreach ($tables as $table) {
    $key = 'Tables_in_' . $database;
    $tablename = $table->$key;
    if (substr($tablename, 0, 13) == 'search_api_db') {
      $indices = db_select('search_api_index', 'sai')
        ->fields('sai', array('machine_name'))
        ->condition('server', 'devtrac_search_server')
        ->execute();
      foreach ($indices as $index) {
        if (strpos($tablename, $index->machine_name) == 14) {
          db_drop_table($tablename);
        }
      }
    }
  }

  // Disable module search_api_db.
  module_disable(array('search_api_db'));
}

/**
 * Implements hook_menu().
 */
function devtrac_solr_search_menu() {
  $items['admin/devtrac7/solr'] = array(
    'title' => "Solr Settings",
    'description' => 'This is the page for various Solr settings',
    'position' => 'right',
    'weight' => -3,
    'access arguments' => array('administer site configuration'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  // Menu item for setting solr search access settings.
  $items['admin/devtrac7/solr/solr_search_access_settings'] = array(
    'title' => 'Solr search access settings',
    'title callback' => 'check_plain',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devtrac_solr_search_access_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Set the threshold for the number of user access items in the system.',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 5,
  );

  return $items;
}

/**
 * Creates form for solr search settings.
 * This setting regulates a warning we give to users when they have too
 * many items in their inbox. Too many items means the string controlling node
 * access that is sent to Solr gets too long and the queries to solr start
 * failing.
 */
function devtrac_solr_search_access_settings_form() {
  $form['devtrac_solr_search_access_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Threshold'),
    '#description' => t('Set the threshold for the number of user access items in the system. Reduce this number if users get empty search pages showing the following error message: "An error occurred while trying to search with Solr: \'400\' Status: Bad Request."'),
    '#default_value' => variable_get('devtrac_solr_search_access_threshold', '75'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

function devtrac_solr_search_access_settings_form_submit($form, &$form_state) {
  $threshold = $form_state['values']['devtrac_solr_search_access_threshold'];
  variable_set('devtrac_solr_search_access_threshold', $threshold);
  drupal_set_message('Your new settings have been saved.');
}

/**
 * Implements hook_user_view().
 */
function devtrac_solr_search_user_view($account, $view_mode, $langcode) {
  /**
   * Let's make sure the user gets a message as soon as he/she gets
   * close to the solr_search request string length on search pages.
   *
   * This causes the following message to be shown on the website's
   * search pages and the pages to be empty:
   *
   *    "An error occurred while trying to search with Solr: '400' Status: Bad Request."
   *
   * That just means the user has to go through his/her inbox and
   * process some of the items in it, until the length of the
   * request string is less than the cut-off length.
   */
  global $user;
  $arg1 = arg(1);
  if (($account->uid == $user->uid) && (arg(0) == 'user') && (is_numeric($arg1))) {
    $threshold = variable_get('devtrac_solr_search_access_threshold', 75);
    $query = db_select('acl_user', 'au')
      ->condition('uid', $account->uid);
    $count = $query
      ->countQuery()
      ->execute()
      ->fetchField();
    if ($count > $threshold) {
      drupal_set_message(t('Dear user, you are advised to process some items from your ') . l(t('inbox'), 'user/' . $account->uid) . t('. If you are getting empty search pages and see the following error message "An error occurred while trying to search with Solr: \'400\' Status: Bad Request." please report this to your site administrator.'));
    }
  }
}
