<?php

/**
 * @file
 * Creates Devtrac Mapbox settings form.
 *
 * The setttings form allows users to add their own mapbox layers to devtrac.
 */

/**
 * Implements of hook_menu()
 */
function devtrac_mapbox_menu(){
  $items['admin/devtrac7/mapbox'] = array(
    'title' => t('Mapbox'),
    'description' => t('Devtrac Mapbox Settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devtrac_mapbox_settings_form'),
    'access arguments' => array('administer mapbox'),
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function devtrac_mapbox_permission() {
  return array(
    'administer mapbox' => array(
      'title' => t('Administer Mapbox'),
      'description' => t('Add, delete and edit the settings for Devtrac Mapbox.'),
    ),
  );
}

/**
 * Implements hook_settings_form()
 */
function devtrac_mapbox_settings_form() {
  $form = array();
  $form['devtrac_mapbox_layers'] = array(
    '#type' => 'textarea',
    '#title' => t('Your layers'),
    '#description' => t('Put in all your layers in the format: <b> mapboxid|title|description|class </b>,
                          where class is the class of the base layer e.g. natural, satellite or street.
                          Incase you wish to leave a certain value empty, leave  the space between the vertical bars(|) empty
                          e.g in case you wish description to be empty, your input should have the format id|title||class'),
    '#default_value' => variable_get("devtrac_mapbox_layers", ""),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_settings_form_validate()
 */
function devtrac_mapbox_settings_form_validate($form, &$form_state) {
  if (!empty($form_state['input']['devtrac_mapbox_layers'])) {
    // Remove any carraige returns from the string.
    $input_string = str_replace("\r" , "", $form_state['input']['devtrac_mapbox_layers']);
    // Split the string into an array of strings.
    $input_strings = explode("\n", $input_string);
    // For each string,
    foreach ($input_strings as $row) {
      if (empty($row)) {
        continue;
      }
      // Split the string into an array of strings again.
      $input_elements = explode ("|", $row);

      // The input elements array cannot have less than 4 strings.
      if (sizeof($input_elements) < 4) {
        form_set_error('Layer string ' . $input_elements[0] . ' missing some elements',
            t('Please enter a value for all the elements of the layer string with id ' . $input_elements[0] .  '.'));
        return;
      }
      // The mapbox id has to have a value.
      if ($input_elements[0]  == "") {
        form_set_error('Layer string ' . $input_elements[0] . ' missing',
            t('Please enter a mapbox id for the layer with title ' . $input_elements[1] . '.'));
        return;
      }
      // The title has to have a value.
      if ($input_elements[1]  == "") {
        form_set_error('Layer string ' . $input_elements[1] . ' missing',
            t('Please enter a title for the layer with id ' . $input_elements[0] .  '.'));
        return;
      }
    }
  }
}

/**
 * Implements hook_openlayers_map_preprocess_alter().
 */
function devtrac_mapbox_openlayers_map_preprocess_alter(&$map = array()) {
  // Store the current map in a variable.
  $current_map = $map;
  // Extract the layers data from the string.
  $layers = devtrac_mapbox_getlayers();

  // Look for key for default layer, then remove the layer from the layers array
  // for the map. Remove the osm cycling map as well.
  $key = array_search($current_map['default_layer'], $current_map['layers']);
  unset($current_map['default_layer']);
  unset($current_map['layers'][$key]);
  unset($current_map['layers']['osm_cycle']);

  $layer_names = array();
  $temp = array();
  $custom = array();

  if(!empty($layers)) {
    foreach($layers as $layer) {
      // Add the layer name to a temmporary layers array.
      $custom[$layer['name']] = $layer['name'];
      array_push($layer_names, $layer['name']);
    }

    // Save the layers of the current map to a temporary variable, unset the
    // layers key, merge the arrays of the new layers and the old layers and
    // store them in the maps layers array.
    $temp = $current_map['layers'];
    unset($current_map['layers']);
    $current_map['layers'] = $custom + $temp;
    $current_map['default_layer'] = $layer_names[0];
    $map = $current_map;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function devtrac_mapbox_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "openlayers" && $api == "openlayers_layers") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_openlayers_layers().
 */
function devtrac_mapbox_openlayers_layers() {
  module_load_include('inc', 'devtrac_mapbox', 'includes/devtrac_mapbox_layers');
  return _devtrac_mapbox_openlayers_layers();
}

/**
 * Function that extracts id, title, name, descriptions and class for each layer
 *
 * @return array $layers
 *   An associative array of associative arrays that represent the additional
 *   layers the user wishes to add. Each layer array has the format:
 *     $layer = array (
 *                'id' => The mapboxid of the layer,
 *                'title' => The title of the layer,
 *                'name' => The machine name of the layer, derived from 'id',
 *                'description' => The description of the layer,
 *                'class' => The class of the layer,
 *              );
 */
function devtrac_mapbox_getlayers() {

  $layers = array();
  $layer_elements = array();
  $layer = array();

  // Get the value of the devtrac_mapbox_layers variable.
  $layer_string = variable_get("devtrac_mapbox_layers", FALSE);

  if($layer_string){
    // Remove any carraige returns from the string.
    $layer_string = str_replace("\r" , "", $layer_string);
    // Split the string into an array of strings.
    $layer_strings = explode("\n", $layer_string);
    // For each string
    foreach ($layer_strings as $row) {
      if (empty($row)) {
        continue;
      }
      // Split the string into an array of strings again.
      $layer_elements = explode ("|", $row);

      // Assign each element to a key.
      $layer['id'] = $layer_elements[0];
      $layer['title'] = $layer_elements[1];

      // Derive the machine name of the layer from its mapbox id.
      $machine_name = strtolower($layer['id']);
      $machine_name = preg_replace('@[^a-z0-9_]+@','_',$machine_name);

      $layer['name'] = $machine_name;
      $layer['description'] = $layer_elements[2];
      $layer['class'] = $layer_elements[3];
      
      // Add this layer array to the array of layers.
      $layers[$layer['name']] = $layer;
    }
  }
  // Return the layers array.
  return $layers;
}

/**
 * Implements hook_openlayers_map_alter().
 * Function that adds an icon for each additional layer to the Layer Switcher.
 */
function devtrac_mapbox_openlayers_map_alter(&$map = array()) {
  global $base_path;
  $path = $base_path . path_to_theme();
  // Extract the layers data from the string.
  $layers = devtrac_mapbox_getlayers();
  if(!is_null($layers)) {
    foreach($layers as $layer) {
      if($layer['class'] != "") {

        // Add a radio button icon for the layer to the layer switcher according
        // to its class.
        drupal_add_css('.olMapViewport .olControlMaptext .openlayers_plus-blockswitcher .layers.base .form-option.radio.'
            . $layer['name'] . ' {background-image: url('
            . $path . '/images/'
            . $layer['class'] . '.png); background-repeat: no-repeat; background-position-x: 5px; background-position-y: 50%; }',
            array( 'group' => CSS_THEME, 'type' => 'inline',));
      }
    }
  }
}

/**
 * Implements hook_apps_app_info()
 * Making Devtrac Mapbox an app.
 */
function devtrac_mapbox_apps_app_info() {
  return array(
    // This form will be rendered on the app config page:
    'configure form' => 'devtrac_mapbox_settings_form',
  );
}
