<?php
/**
 * @file
 */
/**
 * 
 * @return array
 */
function devtrac7_services_user_services_resources(){
  $definition = array(
    'devtracuser' => array(
      'actions' => array(
        'login' => array(
          'help' => 'Login a user for a new session',
          'callback' => '_devtrac7_services_user_resource_login',
          'args' => array(
            array(
              'name' => 'username',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'username'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'password',
              'type' => 'string',
              'description' => 'A valid password',
              'source' => array('data' => 'password'),
              'optional' => FALSE,
            ),
          ),
          'access callback' => 'services_access_menu',
          //'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource1'),
        ),
      ),
    ),
  );

//  $definition['user']['actions']['register'] = array_merge($definition['user']['operations']['create'], array(
//    'help' => 'Register a user',
//  ));

  return $definition;
}


/**
 * Login a user using the specified credentials.
 *
 * Note this will transfer a plaintext password.
 *
 * @param $username
 *   Username to be logged in.
 * @param $password
 *   Password, must be plain text and not hashed.
 *
 * @return
 *   A valid session object.
 */
function _devtrac7_services_user_resource_login($username, $password) {
  global $user;
 
  
  if ($user->uid) {
    // user is already logged in
    return services_error(t('Already logged in as @user.', array('@user' => $user->name)), 406);
  }

  // Check if account is active.
  if (user_is_blocked($username)) {
    return services_error(t('The username %name has not been activated or is blocked.', array('%name' => $username)), 403);
  }

  // Emulate drupal native flood control: check for flood condition.
  $flood_state = array();
  if (variable_get('services_flood_control_enabled', TRUE)) {
    $flood_state = _user_resource_flood_control_precheck($username);
  }

  // Only authenticate if a flood condition was not detected.
  if (empty($flood_state['flood_control_triggered'])) {
    $uid = devtrac7_services_user_authenticate($username, $password);
  }
  else {
    $uid = FALSE;
  }

  // Emulate drupal native flood control: register flood event, and throw error
  // if a flood condition was previously detected
  if (variable_get('services_flood_control_enabled', TRUE)) {
    $flood_state['uid'] = $uid;
    _user_resource_flood_control_postcheck($flood_state);
  }

  if ($uid) {
    $user = user_load($uid);
    if ($user->uid) {
      user_login_finalize();

      $return = new stdClass();
      $return->sessid = session_id();
      $return->session_name = session_name();
      $return->token = drupal_get_token('services');

      $account = clone $user;

      services_remove_user_data($account);

      $return->user = $account;

      return $return;
    }
  }
  watchdog('user', 'Invalid login attempt for %username.', array('%username' => $username));
  return services_error(t('Wrong username or password.'), 401);
}

/**
 * Try to validate the user's login credentials locally.
 *
 * @param $name
 *   User name to authenticate.
 * @param $password
 *   A plain-text password, such as trimmed text from form values.
 * @return
 *   The user's uid on success, or FALSE on failure to authenticate.
 */
function devtrac7_services_user_1authenticate($name, $password) {
  $uid = FALSE;
  if (!empty($name) && !empty($password)) {
    $account = user_load_by_name($name);
    if ($account) {
      if (devtrac7_services_user_check_password($password, $account)) {
        // Successful authentication.
        $uid = $account->uid;
      }
    }
  }
  return $uid;
}


function devtrac7_services_user_authenticate($username, $apikey)  {
  
  watchdog("failure", "thereere username:". $username);


  $regenerate = devtrac7_generate_apikey($username);
  $regenerate = drupal_hash_base64($regenerate);
  watchdog("failure", "key:". $regenerate );
  return ($regenerate && $apikey == $regenerate);

}